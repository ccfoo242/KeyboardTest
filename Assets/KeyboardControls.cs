//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/KeyboardControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @KeyboardControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @KeyboardControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""KeyboardControls"",
    ""maps"": [
        {
            ""name"": ""MyMap"",
            ""id"": ""210a30fb-908e-4089-ab63-3e9341ac83cd"",
            ""actions"": [
                {
                    ""name"": ""PressOnly"",
                    ""type"": ""Button"",
                    ""id"": ""13a633fb-8017-4835-8430-43803929e934"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ReleaseOnly"",
                    ""type"": ""Button"",
                    ""id"": ""bb6f5c0a-33de-4983-a4ec-87ade1a9c264"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PressAndRelease"",
                    ""type"": ""Button"",
                    ""id"": ""4f53e5b9-c258-4c96-9ac0-235e82a16dc3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""84db0a77-6613-416f-8d47-caa2df2394dc"",
                    ""path"": ""<Keyboard>/#(Y)"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PressOnly"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ccb3812d-9051-4c33-b66c-59a51c60403a"",
                    ""path"": ""<Keyboard>/y"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ReleaseOnly"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ab6786b9-8025-47ea-a680-963577779d9c"",
                    ""path"": ""<Keyboard>/y"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PressAndRelease"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MyMap
        m_MyMap = asset.FindActionMap("MyMap", throwIfNotFound: true);
        m_MyMap_PressOnly = m_MyMap.FindAction("PressOnly", throwIfNotFound: true);
        m_MyMap_ReleaseOnly = m_MyMap.FindAction("ReleaseOnly", throwIfNotFound: true);
        m_MyMap_PressAndRelease = m_MyMap.FindAction("PressAndRelease", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MyMap
    private readonly InputActionMap m_MyMap;
    private IMyMapActions m_MyMapActionsCallbackInterface;
    private readonly InputAction m_MyMap_PressOnly;
    private readonly InputAction m_MyMap_ReleaseOnly;
    private readonly InputAction m_MyMap_PressAndRelease;
    public struct MyMapActions
    {
        private @KeyboardControls m_Wrapper;
        public MyMapActions(@KeyboardControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @PressOnly => m_Wrapper.m_MyMap_PressOnly;
        public InputAction @ReleaseOnly => m_Wrapper.m_MyMap_ReleaseOnly;
        public InputAction @PressAndRelease => m_Wrapper.m_MyMap_PressAndRelease;
        public InputActionMap Get() { return m_Wrapper.m_MyMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MyMapActions set) { return set.Get(); }
        public void SetCallbacks(IMyMapActions instance)
        {
            if (m_Wrapper.m_MyMapActionsCallbackInterface != null)
            {
                @PressOnly.started -= m_Wrapper.m_MyMapActionsCallbackInterface.OnPressOnly;
                @PressOnly.performed -= m_Wrapper.m_MyMapActionsCallbackInterface.OnPressOnly;
                @PressOnly.canceled -= m_Wrapper.m_MyMapActionsCallbackInterface.OnPressOnly;
                @ReleaseOnly.started -= m_Wrapper.m_MyMapActionsCallbackInterface.OnReleaseOnly;
                @ReleaseOnly.performed -= m_Wrapper.m_MyMapActionsCallbackInterface.OnReleaseOnly;
                @ReleaseOnly.canceled -= m_Wrapper.m_MyMapActionsCallbackInterface.OnReleaseOnly;
                @PressAndRelease.started -= m_Wrapper.m_MyMapActionsCallbackInterface.OnPressAndRelease;
                @PressAndRelease.performed -= m_Wrapper.m_MyMapActionsCallbackInterface.OnPressAndRelease;
                @PressAndRelease.canceled -= m_Wrapper.m_MyMapActionsCallbackInterface.OnPressAndRelease;
            }
            m_Wrapper.m_MyMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PressOnly.started += instance.OnPressOnly;
                @PressOnly.performed += instance.OnPressOnly;
                @PressOnly.canceled += instance.OnPressOnly;
                @ReleaseOnly.started += instance.OnReleaseOnly;
                @ReleaseOnly.performed += instance.OnReleaseOnly;
                @ReleaseOnly.canceled += instance.OnReleaseOnly;
                @PressAndRelease.started += instance.OnPressAndRelease;
                @PressAndRelease.performed += instance.OnPressAndRelease;
                @PressAndRelease.canceled += instance.OnPressAndRelease;
            }
        }
    }
    public MyMapActions @MyMap => new MyMapActions(this);
    public interface IMyMapActions
    {
        void OnPressOnly(InputAction.CallbackContext context);
        void OnReleaseOnly(InputAction.CallbackContext context);
        void OnPressAndRelease(InputAction.CallbackContext context);
    }
}
